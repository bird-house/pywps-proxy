#!/usr/bin/env bash

# Application
APP_ROOT := $(abspath $(lastword $(MAKEFILE_LIST))/..)
APP_NAME := twitcher
INI_FILE ?= $(APP_ROOT)/development.ini

# Conda
CHECK      ?= shell command -v
CONDA_HOME ?= $($(CHECK) conda info --base 2> /dev/null)
CONDA_ENV  ?= $(APP_NAME)
CONDA_BIN  := $(CONDA_HOME)/bin/conda
CONDA_TARGET_PREFIX := readlink -e "$(CONDA_HOME)/envs/$(CONDA_ENV)" 2> /dev/null
CONDA_ACTUAL_PREFIX := readlink -e "${CONDA_PREFIX}" 2> /dev/null
# don't activate and update conda env if it already is activated
# (avoids long conda 'solving environment' time)
ifeq ($(shell $(CONDA_TARGET_PREFIX)),$(shell $(CONDA_ACTUAL_PREFIX)))
	CONDA_MSG := Conda environment already activated
	CONDA_CMD := echo "$(CONDA_MSG)";
else
	CONDA_MSG := Will activate conda environment with 'CONDA_CMD'
	CONDA_CMD := echo "Activating conda env $(CONDA_ENV) ..."; source "$(CONDA_HOME)/bin/activate" "$(CONDA_ENV)";
endif

DOCKER_TAG := birdhouse/twitcher:0.4.0

# Temp files
TEMP_FILES := *.egg-info *.log *.sqlite

# Bumpversion 'dry' config
# if 'dry' is specified as target, any bumpversion call using 'BUMP_XARGS' will not apply changes
BUMP_XARGS ?= --verbose --allow-dirty
ifeq ($(filter dry, $(MAKECMDGOALS)), dry)
	BUMP_XARGS := $(BUMP_XARGS) --dry-run
endif
.PHONY: dry
dry: setup.cfg
	@-echo > /dev/null

# end of configuration

.DEFAULT_GOAL := help

.PHONY: all
all: help

.PHONY: help
help:
	@echo "Please use 'make <target>' where <target> is one of:"
	@echo "  help              to print this help message. (Default)"
	@echo "  install           to install $(APP_NAME) by running 'python setup.py develop'."
	@echo "  install-dev       to execute 'install' with additional development requirements."
	@echo "  migrate           to upgrade or initialize database."
	@echo "  start             to start $(APP_NAME) service as daemon (background process)."
	@echo "  clean             to delete all files that are created by running buildout."
	@echo "\Environment targets:"
	@echo "  bootstrap         to install $(APP_NAME) after updating the conda environment'."
	@echo "  bootstrap-dev     to execute 'bootstrap' with additional development requirements."
	@echo "  conda-check       to verify that conda is installed and found."
	@echo "  conda-update      to update the conda environment with 'environment.yml' file."
	@echo "  conda-clean       to remove the conda environment."
	@echo "  conda-spec        to generate Conda specifications file."
	@echo "\nDocker targets:"
	@echo "  docker-build      to build the docker image with current code base and version."
	@echo "  docker-push       to push the built docker image to the tagged repository."
	@echo "\nTesting targets:"
	@echo "  test              to run tests (but skip long running tests)."
	@echo "  test-all          to run all tests (including long running tests)."
	@echo "  pep8              to run pep8 code style checks."
	@echo "  converage-test    to run all tests with coverage analysis."
	@echo "  converage-table   to display tests coverage analysis in commandline table."
	@echo "  converage-html    to generate an HTML report from tests coverage analysis."
	@echo "  converage-clean   to delete files generated by tests coverage analysis."
	@echo "\nSphinx targets:"
	@echo "  docs              to generate HTML documentation with Sphinx."
	@echo "\nDeployment targets:"
	@echo "  debug             to print variable values employed by this Makefile."
	@echo "  bump              to update the package version."
	@echo "  dry               to only display results (not applied) when combined with 'bump'."

.PHONY: debug
debug:
	@-echo "Following variables are used:"
	@-echo "  SHELL:                         $(SHELL)"
	@-echo "  CHECK:                         $(CHECK)"
	@-echo "  APP_ROOT:                      $(APP_ROOT)"
	@-echo "  APP_NAME:                      $(APP_NAME)"
	@-echo "  BUMP_XARGS:                    $(BUMP_XARGS)"
	@-echo "  CONDA_HOME:                    $(CONDA_HOME)"
	@-echo "  CONDA_BIN:                     $(CONDA_BIN)"
	@-echo "  CONDA_ENV:                     $(CONDA_ENV)"
	@-echo "  CONDA_MSG:                     $(CONDA_MSG)"
	@-echo "  CONDA_CMD:                     $(CONDA_CMD)"
	@-echo "  CONDA_TARGET_PREFIX [literal]: $(CONDA_TARGET_PREFIX)"
	@-echo "  CONDA_ACTUAL_PREFIX [called]:  $(shell $(CONDA_TARGET_PREFIX))"
	@-echo "  CONDA_TARGET_PREFIX [literal]: $(CONDA_ACTUAL_PREFIX)"
	@-echo "  CONDA_ACTUAL_PREFIX [called]:  $(shell $(CONDA_ACTUAL_PREFIX))"
	@-echo "  DOCKER_TAG:                    $(DOCKER_TAG)"

## Conda targets

.PHONY: conda-check
conda-check:
ifndef CONDA_BIN
	$(error "Conda is not available. Please install miniconda: https://conda.io/miniconda.html")
endif

.PHONY: conda-update
conda-update: conda-check
	@echo "Updating conda environment $(CONDA_ENV) ..."
	@-"$(CONDA_BIN)" env update -n "$(CONDA_ENV)" -f environment.yml

.PHONY: conda-clean
conda-clean: conda-check
	@echo "Removing conda env $(CONDA_ENV)"
	@-"$(CONDA_BIN)" remove -n "$(CONDA_ENV)" --yes --all

.PHONY: conda-spec
spec: conda-check
	@echo "Updating conda environment specification file ..."
	@-"$(CONDA_BIN)" list -n "$(CONDA_ENV)" --explicit > spec-file.txt

## Version targets

.PHONY: bump-dep
bump-dep: conda-check
	@-bash -c '$(CONDA_CMD) pip install bump2version'

.PHONY: bump
bump: conda-check bump-dep
	@-echo "Updating package version ..."
	@[ "${VERSION}" ] || ( echo ">> 'VERSION' is not set"; exit 1 )
	@-bash -c '$(CONDA_CMD) bump2version $(BUMP_XARGS) --new-version "${VERSION}" patch;'

## Build targets

.PHONY: bootstrap
bootstrap: conda-check conda-update
	@echo "Bootstrap ..."

.PHONY: bootstrap-dev
bootstrap-dev: conda-check conda-update
	@echo "Bootstrap for development ..."

.PHONY: install
install: conda-check bootstrap
	@echo "Installing application ..."
	@-bash -c '$(CONDA_CMD) pip install -e "$(APP_ROOT)"'
	@echo "\nStart service with \`make start'"

.PHONY: install-dev
install-dev: conda-check bootstrap-dev
	@echo "Installing development requirements for tests and docs ..."
	@-bash -c '$(CONDA_CMD) pip install -e "$(APP_ROOT)[dev]"'

.PHONY: db
db: conda-check
	@echo "Upgrade or initialize database ..."
	@-bash -c '$(CONDA_CMD) alembic -c "$(INI_FILE)" upgrade head'
	@-bash -c '$(CONDA_CMD) initialize_twitcher_db "$(INI_FILE)"'

.PHONY: start
start: conda-check
	@echo "Starting application ..."
	@-bash -c '$(CONDA_CMD) pserve "$(INI_FILE)" &'

.PHONY: clean
clean: srcclean conda-clean
	@echo "Cleaning generated files ..."
	@-for i in $(TEMP_FILES); do \
  	test -e $$i && rm -v -rf $$i; \
  done

.PHONY: srcclean
srcclean:
	@echo "Removing *.pyc files ..."
	@-find "$(APP_ROOT)" -type f -name "*.pyc" -print | xargs rm

.PHONY: distclean
distclean: clean
	@echo "Cleaning ..."
	@git diff --quiet HEAD || echo "There are uncommited changes! Not doing 'git clean' ..."
	@-git clean -dfx

## Docker targets

.PHONY: docker-build
docker-build:
	@echo "Building docker image: $(DOCKER_TAG)"
	@-docker build "$(APP_ROOT)" -t "$(DOCKER_TAG)"

.PHONY: docker-push
docker-push:
	@echo "Pushing docker image: $(DOCKER_TAG)"
	@-docker push "$(DOCKER_TAG)"

## Test targets

.PHONY: test
test: conda-check
	@echo "Running tests (skip slow and online tests) ..."
	@bash -c '$(CONDA_CMD) pytest -v -m "not slow and not online" "$(APP_ROOT)/tests/"'

.PHONY: test-unit
test-unit: conda-check
	@echo "Running only unit tests ..."
	@bash -c '$(CONDA_CMD) pytest -v -m "not mongo and not slow and not online" "$(APP_ROOT)/tests/"'

.PHONY: test-all
test-all: conda-check
	@echo "Running all tests (including slow and online tests) ..."
	@bash -c '$(CONDA_CMD) pytest -v "$(APP_ROOT)/tests/"'

.PHONY: pep8
pep8: conda-check
	@echo "Running pep8 code style checks ..."
	@bash -c '$(CONDA_CMD) flake8'

# run only if .coverage doesn't already exist
# all other coverage targets will use existing results if available
.coverage:
	@echo "Running coverage analysis..."
	@bash -c '$(CONDA_CMD) pytest --cov "$(APP_ROOT)/tests/"'

.PHONY: coverage-test
coverage-test: coverage-clean .coverage

.PHONY: coverage-clean
coverage-clean:
	@-rm -f .coverage
	@-rm -fr ./coverage/

.PHONY: coverage-table
coverage-table: .coverage
	@bash -c '$(CONDA_CMD) coverage report -m'

.PHONY: coverage-html
coverage-html: .coverage
	@bash -c '$(CONDA_CMD) coverage html -d "$(APP_ROOT)/coverage"'
	@-echo "Coverage report: open file://$(APP_ROOT)/coverage/index.html"

##  Sphinx targets

.PHONY: docs
docs: conda-check
	@echo "Generating docs with Sphinx ..."
	@-bash -c '$(CONDA_CMD) $(MAKE) -C $@ clean html'
	@echo "open your browser: open file://$(APP_ROOT)/docs/build/html/index.html"
